#!/usr/bin/env python3
version = "0.0.2"
debug = False
import sys
import math
import argparse
import json
import os

stack = []
dict = {}
def approx(a, b, tolerance=1.490116e-08): # crude version of all.equal in R
    diff = abs(a - b)
    if diff < tolerance:
        return 1.0
    else:
        return float(diff * b < tolerance)
def checkstack(n, token): # ensure stack has at least n items
    nstack = len(stack)
    if nstack < n:
        print(f'The stack only has {nstack} items, but {token} requires at least {n} items; next is stack:')
        print(stack)
        sys.exit(1)
examples = """Examples:
  rpn e                        # 2.718282 (Euler's number ...)
  rpn e -d 10 2.7192818 approx  # 2.7182818285 (... to 10 digits.)
  rpn pi                       # 3.141593 (pi is also built-in)
  rpn 10 35                    # [10.0, 35.0] (two items on stack ...)
  rpn 10 35 + 45 APPROX        # 45.000000 (addition)
  rpn 10 2 / 5 APPROX          # divide second-last stack item by last stack item
  rpn 10 2 x 20 APPROX         # multiplication, preferred style ...
  rpn 45 sin 2 sqrt inv APPROX # sin, cos and tan take angle in degrees
  rpn 10 35 exch               # [35.0, 10.0] (... exchange those items)
  rpn 1 asin 90 APPROX         # asin, acos and atan return an angle in degrees
  rpn 10 ln                    # natural log
  rpn 10 log                   # base-10 log
  rpn 10 2 ^ 100 APPROX        # exponentiation

Saving 'def' quantities to a file
  rpn -l gravity.json 5.972e24 _Me def 6371e3 _Re def 6.674e-11 _G def
  rpn -l gravity.json _G _Me x _Re sqr / _g def
  rpn -l gravity.json -s # shows the built-in dictionary, with these additions

Puzzles: without running rpn, guess the meaning of the following
  rpn pi 4 / deg sin
  rpn 45 sin sqr 45 cos sqr +
  rpn 1e-7 _eps def 1 _eps + sqr 1 sqr - _eps /

Built-in values
  e, pi

Unary operators (replace last item on stack):
  cos, sin, tan (in degrees),
  acos, asin, atan, (in degrees)
  deg, rad, # convert to degrees or to radians
  cosh, sinh, tanh (not in degrees)
  acosh, asinh, atanh, (not in degrees)
  exp, ln, log, sqr, sqrt
  chs, exp, inv

Binary operators:
  +, -, /, x, ^,
  approx, APPROX, equal, EQUAL

Stack operators:
  exch, dup

Definitional operators:
  def

Development notes:
  I want to find a way to define functions.  That seems tricky with RPN
  notation, but could emulate Forth, with prefix notation for this.

Installation:
  Visit http://www.github.com/dankelley/rpn and download `rpn`. Then make
  it executable (with `chmod +x rpn` on unix machines), and put it,
  or an alias, in your unix "path" (I alias it to `~/bin/,rpn` because
  I like using a comma at the start of non-standard local commands.)
"""
parser = argparse.ArgumentParser(prog='rpn',
                                 description='An RPN commandline calculator',
                                 usage='rpn [-v] [-h] [-s] [-d DIGITS] [-l FILENAME] [tokens]',
                                 epilog=examples,
                                 formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-d', '--digits', type=int, default=6, help='number of digits to show in final (singleton) result')
parser.add_argument('-l', '--library', type=str, help='name of a file to save/retrieve def items')
parser.add_argument('-s', "--stack", action='store_true', help='show stack during processing')
parser.add_argument('-v', "--version", action='store_true', help='show version number and then quit')
parser.add_argument("tokens", nargs="*")
options,args = parser.parse_known_args()

if options.version:
    print(f'Version {version}')
    sys.exit(0)

if options.library is not None:
    if os.path.exists(options.library):
        with open(options.library) as file:
            dict = json.load(file)
        #print(f'FIXME: read {len(dict)} "def" items from {options.library}')
        #print(dict)

tokens = options.tokens
tokenc = len(tokens)
#if tokenc == 0:
#    print("Error: must supply tokens; try -h for help")
#    sys.exit(2)
i = 0
while i < len(tokens):
    token = tokens[i]
    slen = len(stack)
    if i < len(tokens) - 1: # nextoken is used to let "def" redefine symbols
        nexttoken = tokens[i+1]
    else:
        nexttoken = None
    if debug:
        print(f'len(tokens): {len(tokens)}, token: {token}, nexttoken: {nexttoken} at start of loop')
    if token == "+":
        checkstack(2, token)
        stack[slen - 2] = float(stack[slen-2]) + float(stack[slen-1])
        stack.pop()
    elif token == "-":
        checkstack(2, token)
        stack[slen - 2] = float(stack[slen-2]) - float(stack[slen-1])
        stack.pop()
    elif token == "x":
        checkstack(2, token)
        stack[slen - 2] = float(stack[slen-2]) * float(stack[slen-1])
        stack.pop()
    elif token == "/":
        checkstack(2, token)
        stack[slen - 2] = float(stack[slen-2]) / float(stack[slen-1])
        stack.pop()
    elif token == "^":
        checkstack(2, token)
        stack[slen - 2] = pow(float(stack[slen-2]), float(stack[slen-1]))
        stack.pop()
    elif token == "EQUAL":
        checkstack(2, token)
        back1 = stack[slen - 1]
        back2 = stack[slen - 2]
        if stack[slen - 1] != stack[slen - 2]:
            print(f"EQUAL test failed on {stack[slen-2]} and {stack[slen-1]}\n")
            sys.exit(2)
        stack.pop()
        stack.pop()
    elif token == "equal":
        checkstack(2, token)
        stack[slen - 2] = float(float(stack[slen-2]) == float(stack[slen-1]))
        stack.pop()
    elif token == "approx":
        checkstack(2, token)
        stack[slen - 2] = float(approx(float(stack[slen-2]), float(stack[slen-1])))
        stack.pop()
    elif token == "APPROX":
        checkstack(2, token)
        if approx(float(stack[slen-2]), float(stack[slen-1])) != 1.0:
            print(f"APPROX test failed on {stack[slen-2]} and {stack[slen-1]}\n")
            sys.exit(2)
        stack.pop()
        stack.pop()
    elif token == "exch":
        checkstack(2, token)
        tmp = stack[slen - 1]
        stack[slen - 1] = stack[slen - 2]
        stack[slen - 2] = tmp
    elif token == "chs":
        stack[slen - 1] = -(float(stack[slen-1]))
    elif token == "sqrt":
        stack[slen - 1] = math.sqrt(float(stack[slen-1]))
    elif token == "sqr":
        stack[slen - 1] = float(stack[slen-1]) **2
    elif token == "inv":
        stack[slen - 1] = 1.0 / (float(stack[slen-1]))
    elif token == "sin":
        stack[slen - 1] = math.sin(math.radians(float(stack[slen-1])))
    elif token == "sinh":
        stack[slen - 1] = math.sinh(float(stack[slen-1]))
    elif token == "asin":
        stack[slen - 1] = math.degrees(math.asin(float(stack[slen-1])))
    elif token == "asinh":
        stack[slen - 1] = math.asinh(float(stack[slen-1]))
    elif token == "cos":
        stack[slen - 1] = math.cos(math.radians(float(stack[slen-1])))
    elif token == "cosh":
        stack[slen - 1] = math.cosh(float(stack[slen-1]))
    elif token == "acos":
        stack[slen - 1] = math.degrees(math.acos(float(stack[slen-1])))
    elif token == "acosh":
        stack[slen - 1] = math.acosh(float(stack[slen-1]))
    elif token == "tan":
        stack[slen - 1] = math.tan(math.radians(float(stack[slen-1])))
    elif token == "tanh":
        stack[slen - 1] = math.tanh(float(stack[slen-1]))
    elif token == "atan":
        stack[slen - 1] = math.degrees(math.atan(float(stack[slen-1])))
    elif token == "atanh":
        stack[slen - 1] = math.atanh(float(stack[slen-1]))
    elif token == "deg":
        stack[slen - 1] = math.degrees(float(stack[slen-1]))
    elif token == "rad":
        stack[slen - 1] = math.radians(float(stack[slen-1]))
    elif token == "exp":
        stack[slen - 1] = math.exp(float(stack[slen-1]))
    elif token == "ln":
        stack[slen - 1] = math.log(float(stack[slen-1]))
    elif token == "log":
        stack[slen - 1] = math.log10(float(stack[slen-1]))
    elif token == "pi":
        stack.append(math.pi)
    elif token == "e":
        stack.append(math.e)
    elif token == "dup":
        stack.append(stack[slen - 1])
    elif token == "def":
        if (debug):
            print("got 'def' ... next is stack:")
            print(stack)
        checkstack(2, token)
        name = stack[slen - 1]
        if (name[0] != "_"):
            print(f'cannot define "{name}" because it does not start with "_"')
            sys.exit(1)
        if name in dict.keys():
            if options.library is None:
                print(f'Redefining "{name}"')
            else:
                print(f'Redefining "{name}" in library "{options.library}"')
        dict[name] = stack[slen - 2]
        stack.pop()
        stack.pop()
        if options.stack:
            print(dict)
    elif token in dict.keys():
        if debug:
            print(f"token {token} is in dict; nexttoken={nexttoken}")
            print("dict:")
            print(dict)
            print("stack:")
            print(stack)
        if nexttoken != "def":
            if debug:
                print("OK, appending now (FIXME)")
            stack.append(dict[token])
        else:
            stack.append(token)
    else:
        stack.append(token)
    if options.stack:
        print("%6s" % token, stack)
    i = i + 1

#print(dict)
#print(f'options.library: {options.library}')
if options.library is not None and len(dict) > 0:
    # I'm not sure why the next goes to the except clause, but I've
    # got other fish to fry
    #    try:
    #        with open(options.library, "w") as file:
    #            print(f'Saving dict to file: {e}')
    #            json.dump(dict, file, indent=4)
    #    except: # IOError as e:
    #        print(f'Cannot save dict to file: {options.library}')
    with open(options.library, "w") as file:
        json.dump(dict, file, indent=4)

format = f'%.{options.digits}f'
if len(stack) > 1:
    #print("next is stack")
    print(stack)
elif len(stack) == 1:
    #print("next is stack (singleton)")
    print(format % float(stack[0]))
if options.stack and len(dict) > 0:
    print(dict)

